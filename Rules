#!/usr/bin/env ruby
# frozen_string_literal: true

preprocess do
  # ignore unpublished items
  @items.delete_if { |item| item[:published] == false }

  all_notes.each do |item|
    slug = %r{\d{4}-\d{2}-\d{2}-([^/]+)}.match(item.identifier.without_exts).captures.first
    item[:slug] = slug
  end
end

compile '/assets/icons/**/*.svg' do
  # TODO: optimize SVG (with svgo or something like that)

  # no need to write/route such SVG, inlined within HTML
  write nil
end

compile '/static/**/*' do
  # don't filter or layout
end

# simply copy other assets
passthrough '/images/**/*'

compile '/notes/**/*' do
  filter :fenced_code_block
  filter :erb
  filter :kramdown
  filter :colorize_syntax, default_colorizer: :rouge
  layout '/note.*'
  layout '/base.*'
end

compile '/{rss,sitemap}.*' do
  filter :erb
end

compile '/**/*' do
  unless item.binary?
    filter :erb
    filter :kramdown
    unless item[:layout] == 'none'
      layout "/#{item[:layout]}.*" unless item[:layout].nil?
      layout '/base.*'
    end
  end
end

route '/notes/**/*' do
  raise "item #{item.identifier} doesn't have a slug" if item[:slug].nil?

  slug = item[:slug]
  post_date = Date.parse(item[:created_at].to_s)
  month_2d = format('%02d', post_date.month)
  day_2d = format('%02d', post_date.mday)
  "/#{post_date.year}/#{month_2d}/#{day_2d}/#{slug}/index.html"
end

route '/static/**/*' do
  item.identifier.to_s.delete_prefix('/static')
end

route '/{rss,sitemap}.*' do
  item.identifier.to_s
end

route '/error/**/*' do
  "#{item.identifier.without_ext.to_s.delete_prefix('/error')}.html"
end

route '/**/*' do
  if item.binary?
    item.identifier.to_s
  else
    "#{item.identifier.without_ext}.html"
  end
end

layout '/**/*', :erb, trim_mode: '-'
